@page "/tasks"
@using Agent.Abstract.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Radzen
@using Ui.Client.Pages.TaskDetail
@using Ui.Shared
@using System.Text.Json
@using System.Text.Encodings.Web

@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6" style="margin-bottom: 16px">
        <h2 class="text-center">Task List</h2>

        <RadzenTree Data="@taskMessages.Values.OrderByDescending(x=>x.StartDate)" Expand="@Expand" Change="@Change"
                    Style="width: 100%">
            <RadzenTreeLevel TextProperty="Name" ChildrenProperty="Children">
                <Template>
                    @{
                        var task = context.Value as TaskWithSubTasks;
                    }
                    <div class="row" style="@($"width: 98%;background-color:{(Math.Abs(task.ProcessPercentage - 100) < 0.1?"#b3ffb326":"#fff98026")}")">
                          <div class="col-sm-8" style="word-break: break-all;word-wrap: break-word">@task.Name</div>
                        <div class="col-sm-4">@task.StartDate</div>
                        
                        <div style="@($"height: 0.4em;background-color: green;width: {(int) task.ProcessPercentage}%;border-radius: 1em;opacity: 0.8;")"></div>
                    </div>
                </Template>
            </RadzenTreeLevel>
            <RadzenTreeLevel TextProperty="Name" HasChildren="@((task) => false)">
                <Template>
                    @{
                        var task = context.Value as TaskWithSubTasks;
                    }
                    <div class="row" style="width: 98%;margin-left:0;">
                        <div class="col-sm-8" style="word-break: break-all;word-wrap: break-word">@task.Name</div>
                        <div class="col-sm-4">@task.StartDate</div>
                        
                        <div style="@($"height: 0.4em;background-color: green;width: {(int) task.ProcessPercentage}%;border-radius: 1em;opacity: 0.8;")"></div>
                    </div>
                </Template>
            </RadzenTreeLevel>
        </RadzenTree>
    </div>
    <div class="col-md-6" style="margin-bottom: 16px">
        <RadzenCard style="overflow: auto;height:500px;width: 35%; position: fixed; justify-content: space-between;">
            @if (isCreateEnabled)
            {
                <TaskCreate OnTaskCreate="@OnTaskCreate"/>
            }
            else
            {
                <TaskInfo @bind-SelectedTask="selectedTask"></TaskInfo>
            }
            <div class="row justify-content-between">
                <button class="col col-md-6 btn btn-info" @onclick="@(e => isCreateEnabled = !isCreateEnabled)">
                    @if (!isCreateEnabled)
                    {
                        <span>Create task</span>
                    }
                    else
                    {
                        <span>Cancel</span>
                    }
                </button>
                @if (selectedTask != null && !isCreateEnabled)
                {
                    <button class="col col-md-5 btn btn-danger">Delete</button>
                }
            </div>
        </RadzenCard>
    </div>
</div>

@code {
    private HubConnection _hubConnection;

    private Dictionary<Guid, TaskWithSubTasks> taskMessages = new Dictionary<Guid, TaskWithSubTasks>();

    bool isCreateEnabled = false;

    TaskWithSubTasks selectedTask = null;

    void Change(TreeEventArgs args)
    {
        if (args.Value is TaskWithSubTasks task)
        {
            selectedTask = task;
        }
    }

    void Expand(TreeExpandEventArgs args)
    {
        if (args.Value is TaskWithSubTasks task)
        {
            selectedTask = task;
        }
    }

    async Task OnTaskCreate(TaskMessage task)
    {
        Console.WriteLine("Task create in task list called");
        await _hubConnection.InvokeCoreAsync(SignalRMessages.CreateTask.ToString(), new[] {task});
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/taskHub"))
            .WithAutomaticReconnect()
            .ConfigureLogging(x => x.AddProvider(new ConsoleLogProvider()))
            .Build();

        _hubConnection.On<TaskWithSubTasks>(SignalRMessages.TaskStateChanged.ToString(), (msg) =>
        {
            if (taskMessages.TryGetValue(msg.Id, out var currentTask))
            {
                currentTask.State = msg.State;
                if (msg.Children?.Any() ?? false) currentTask.Children = msg.Children;
                currentTask.ProcessPercentage = msg.ProcessPercentage;
                currentTask.ErrorPercentage = msg.ErrorPercentage;
                currentTask.UniquePercentage = msg.UniquePercentage;
                if (!string.IsNullOrEmpty(msg.Report)) currentTask.Report = msg.Report;
            }
            else if (msg.ParentId != default && taskMessages.TryGetValue(msg.ParentId, out currentTask))
            {
                var child = currentTask.Children?.FirstOrDefault(x => x.Id == msg.Id);
                if (child != null)
                {
                    child.ProcessPercentage = msg.ProcessPercentage;
                    child.ErrorPercentage = msg.ErrorPercentage;
                    child.UniquePercentage = msg.UniquePercentage;
                    if (msg.StartDate != DateTime.MinValue)
                    {
                        child.StartDate = msg.StartDate;
                        if (currentTask.StartDate == DateTime.MinValue) currentTask.StartDate = child.StartDate;
                    }
                    if (!string.IsNullOrEmpty(child.Report)) child.Report = msg.Report;
                    currentTask.ProcessPercentage = currentTask.Children.Sum(x => x.ProcessPercentage) / currentTask.Children.Count;
                    currentTask.UniquePercentage = currentTask.Children.Sum(x => x.UniquePercentage) / currentTask.Children.Count;
                    currentTask.ErrorPercentage = currentTask.Children.Sum(x => x.ErrorPercentage) / currentTask.Children.Count;
                }
                else
                {
                    currentTask.Children ??= new List<TaskWithSubTasks>();
                    currentTask.Children.Add(msg);
                }
            }
            else
            {
                taskMessages[msg.Id] = msg;
            }

            StateHasChanged();
        });

        _hubConnection.On<Dictionary<string, TaskWithSubTasks>>(SignalRMessages.TasksConnectAccepted.ToString(), (msg) =>
        {
            try
            {
                taskMessages = msg.OrderByDescending(x => x.Value.StartDate).ToDictionary(x => Guid.Parse(x.Key),
                    x =>
                    {
                        var task = x.Value;
                        if (task.Children?.Count > 0)
                        {
                            task.ProcessPercentage = task.Children.Sum(y => y.ProcessPercentage) / task.Children.Count;
                            task.ErrorPercentage = task.Children.Sum(y => y.ErrorPercentage) / task.Children.Count;
                            task.UniquePercentage = task.Children.Sum(y => y.UniquePercentage) / task.Children.Count;
                        }
                        return task;
                    });
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        });
        await _hubConnection.StartAsync();
    }

}